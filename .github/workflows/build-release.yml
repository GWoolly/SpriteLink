name: Build Release ZIP
on:
  push:
    tags:
      - "v*"       # Runs when you push a tag like v1.0.0
  workflow_dispatch: # Allow manual trigger from the GitHub UI
jobs:
  build-zip:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
     
      - name: Merge utility scripts into main Lua files
        run: |
          # Create a temporary directory for processed files
          mkdir -p temp_processed
         
          # Function to merge utilities into a single file
          merge_utilities() {
            local target_file="$1"
            local temp_file="temp_processed/$(basename "$target_file")"
           
            echo "-- Merged utilities for $(basename "$target_file")" > "$temp_file"
            echo "-- Generated automatically by GitHub Actions" >> "$temp_file"
            echo "" >> "$temp_file"
           
            # First, scan the main file for require statements and collect needed utilities
            declare -A required_utils
            if [ -f "$target_file" ]; then
              while IFS= read -r line; do
                # Match patterns like: local json = require"utilities.json" or local json = require("utilities.json")
                if [[ "$line" =~ ^[[:space:]]*local[[:space:]]+([a-zA-Z_][a-zA-Z0-9_]*)[[:space:]]*=[[:space:]]*require[[:space:]]*[\(\"]utilities\.([a-zA-Z_][a-zA-Z0-9_]*) ]]; then
                  local var_name="${BASH_REMATCH[1]}"
                  local util_name="${BASH_REMATCH[2]}"
                  required_utils["$util_name"]="$var_name"
                fi
              done < "$target_file"
            fi
           
            # Add utility scripts for only the required ones
            for util_name in "${!required_utils[@]}"; do
              local var_name="${required_utils[$util_name]}"
              local util_file="utilities/${util_name}.lua"
              
              if [ -f "$util_file" ]; then
                echo "-- === Utility: $util_name (as $var_name) ===" >> "$temp_file"
                echo "local $var_name = (function()" >> "$temp_file"
                cat "$util_file" >> "$temp_file"
                echo "" >> "$temp_file"
                echo "end)()" >> "$temp_file"
                echo "" >> "$temp_file"
              fi
            done
           
            echo "-- === Main Script ===" >> "$temp_file"
            
            # Process the main file and replace require statements
            while IFS= read -r line; do
              # Check if this line has a require statement for a utility
              if [[ "$line" =~ ^([[:space:]]*local[[:space:]]+[a-zA-Z_][a-zA-Z0-9_]*[[:space:]]*=[[:space:]]*)require[[:space:]]*[\(\"]utilities\.([a-zA-Z_][a-zA-Z0-9_]*) ]]; then
                local util_name="${BASH_REMATCH[2]}"
                # Skip this line since we've already included the utility above
                echo "-- Utility $util_name inlined above" >> "$temp_file"
              else
                # Copy the line as-is
                echo "$line" >> "$temp_file"
              fi
            done < "$target_file"
          }
         
          # Process all .lua files in the main directory (not subdirectories)
          for lua_file in *.lua; do
            if [ -f "$lua_file" ]; then
              echo "Processing $lua_file..."
              merge_utilities "$lua_file"
            fi
          done
     
      - name: Create release folder
        run: |
          RELEASE_NAME="SpriteLink"
          mkdir "$RELEASE_NAME"
       
          # Copy everything except ignored files and utilities
          rsync -av ./ "$RELEASE_NAME/" \
            --exclude ".git/" \
            --exclude ".github/" \
            --exclude ".gitignore" \
            --exclude ".gitattributes" \
            --exclude ".vscode/" \
            --exclude "*.zip" \
            --exclude "*.log" \
            --exclude "*.tmp" \
            --exclude "*.bak" \
            --exclude "temp_processed/" \
            --exclude "utilities/" \
            --exclude "$RELEASE_NAME/"
       
          # Replace main directory Lua files with merged versions
          if [ -d "temp_processed" ]; then
            for merged_file in temp_processed/*.lua; do
              if [ -f "$merged_file" ]; then
                cp "$merged_file" "$RELEASE_NAME/"
              fi
            done
          fi
       
          # Clean up temp directory
          rm -rf temp_processed
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: SpriteLink
          path: SpriteLink/