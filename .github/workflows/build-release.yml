name: Build Release ZIP
on:
  push:
    tags:
      - "v*"       # Runs when you push a tag like v1.0.0
  workflow_dispatch: # Allow manual trigger from the GitHub UI
jobs:
  build-zip:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
     
      - name: Merge utility scripts into main Lua files
        run: |
          # Create a temporary directory for processed files
          mkdir -p temp_processed
         
          # Function to merge utilities into a single file
          merge_utilities() {
            local target_file="$1"
            local temp_file="temp_processed/$(basename "$target_file")"
           
            echo "-- Merged utilities for $(basename "$target_file")" > "$temp_file"
            echo "-- Generated automatically by GitHub Actions" >> "$temp_file"
            echo "" >> "$temp_file"
           
            # Add all utility scripts as objects
            if [ -d "utilities" ]; then
              for util_file in utilities/*.lua; do
                if [ -f "$util_file" ]; then
                  # Extract filename without extension
                  local util_name=$(basename "$util_file" .lua)
                  echo "-- === Utility Object: $util_name ===" >> "$temp_file"
                  echo "local $util_name = (function()" >> "$temp_file"
                  
                  # Add the entire utility file content
                  cat "$util_file" >> "$temp_file"
                  
                  echo "" >> "$temp_file"
                  echo "-- Return the utility module" >> "$temp_file"
                  echo "return {" >> "$temp_file"
                  
                  # Extract function names and add them to return table
                  grep -E "^[[:space:]]*function[[:space:]]+[a-zA-Z_][a-zA-Z0-9_]*" "$util_file" | sed -E 's/^[[:space:]]*function[[:space:]]+([a-zA-Z_][a-zA-Z0-9_]*).*/  \1 = \1,/' >> "$temp_file"
                  grep -E "^[[:space:]]*local[[:space:]]+function[[:space:]]+[a-zA-Z_][a-zA-Z0-9_]*" "$util_file" | sed -E 's/^[[:space:]]*local[[:space:]]+function[[:space:]]+([a-zA-Z_][a-zA-Z0-9_]*).*/  \1 = \1,/' >> "$temp_file"
                  
                  echo "}" >> "$temp_file"
                  echo "end)()" >> "$temp_file"
                  echo "" >> "$temp_file"
                fi
              done
            fi
           
            echo "-- === Main Script ===" >> "$temp_file"
            cat "$target_file" >> "$temp_file"
          }
         
          # Process all .lua files in the main directory (not subdirectories)
          for lua_file in *.lua; do
            if [ -f "$lua_file" ]; then
              echo "Processing $lua_file..."
              merge_utilities "$lua_file"
            fi
          done
     
      - name: Create release folder
        run: |
          RELEASE_NAME="SpriteLink"
          mkdir "$RELEASE_NAME"
       
          # Copy everything except ignored files and utilities
          rsync -av ./ "$RELEASE_NAME/" \
            --exclude ".git/" \
            --exclude ".github/" \
            --exclude ".gitignore" \
            --exclude ".gitattributes" \
            --exclude ".vscode/" \
            --exclude "*.zip" \
            --exclude "*.log" \
            --exclude "*.tmp" \
            --exclude "*.bak" \
            --exclude "temp_processed/" \
            --exclude "utilities/" \
            --exclude "$RELEASE_NAME/"
       
          # Replace main directory Lua files with merged versions
          if [ -d "temp_processed" ]; then
            for merged_file in temp_processed/*.lua; do
              if [ -f "$merged_file" ]; then
                cp "$merged_file" "$RELEASE_NAME/"
              fi
            done
          fi
       
          # Clean up temp directory
          rm -rf temp_processed
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: SpriteLink
          path: SpriteLink/